import telebot
from telebot import types
import requests
import os
import re
from fpdf import FPDF

def create_pdf(lyrics, output_path):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    margins = 4
    min_font_size = 6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
    def create_pdf_with_font_size(text, size):
        pdf = FPDF()
        pdf.set_margins(left=margins, top=margins, right=margins)
        pdf.set_auto_page_break(auto=True, margin=margins)
        pdf.add_page()
        pdf.add_font('DejaVu', '', "DejaVuSans.ttf", uni=True)
        pdf.set_font('DejaVu', '', size=size)
        line_height = size / 2.5
        pdf.multi_cell(0, line_height, text, align="L")
        return pdf
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    def check_fits_on_page(text, size):
        temp_pdf_path = "temp_check.pdf"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_pdf = create_pdf_with_font_size(text, size)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF
        test_pdf.output(temp_pdf_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        page_count = test_pdf.page_no()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_pdf_path):
            os.remove(temp_pdf_path)
            
        return page_count == 1
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
    font_size = 30
    
    # –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    while font_size > min_font_size:
        if check_fits_on_page(lyrics, font_size):
            break
        font_size -= 0.5  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–≥–æ–º
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PDF —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
    pdf = create_pdf_with_font_size(lyrics, font_size)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–ª—É—á–∏–ª–æ—Å—å
    final_page_count = pdf.page_no()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
    if final_page_count > 1:
        print(f"–¢–µ–∫—Å—Ç –∑–∞–Ω—è–ª {final_page_count} —Å—Ç—Ä–∞–Ω–∏—Ü. –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
        additional_reduction = 0.5
        max_attempts = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        for _ in range(max_attempts):
            # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
            font_size -= additional_reduction
            
            if font_size < min_font_size:
                font_size = min_font_size
                print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {min_font_size} –ø—Ç")
                break
                
            # –ü—Ä–æ–±—É–µ–º —Å –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
            pdf = create_pdf_with_font_size(lyrics, font_size)
            
            if pdf.page_no() == 1:
                print(f"–ü–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                break
                
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–µ–∫—Å—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
            if font_size <= min_font_size:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞ {min_font_size} –ø—Ç.")
                break
    
    # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"–í—ã–±—Ä–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {font_size} –ø—Ç")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {pdf.page_no()}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF-—Ñ–∞–π–ª
    pdf.output(output_path)
    print(f"PDF-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {output_path}")
    return output_path


CHORD_REGEX = re.compile(
    r'^[A-H][b#]?('
    r'2|5|6|7|9|11|13|\+[2-9]|\+1[1-3]|6/9|7[-#]5|7[-#]9|7\+[35]|7\+9|7b[59]|'
    r'7sus[24]|sus4|add[2469]|aug|dim|dim7|m/maj7|m[67]|m7b5|m(9|11|13)|'
    r'maj[79]?|maj1[1-3]|mb5|m|sus[24]?|m7add11|add11|b5|-5|4'
    r')*(/[A-H][b#]*)*$', re.I
)

CHORD_SYMBOLS = {'|', '/', '(', ')', '-', 'x2', 'x3', 'x4', 'x5', 'x6', 'NC'}

SECTION_LABELS = {
    *[f"{i}|" for i in range(10)],
    *[f"{i}:" for i in range(10)],
    *map(str.lower, [
        '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', '–ò–Ω—Ç—Ä–æ:', '–ö—É–ø–ª–µ—Ç:', '–ü—Ä–∏–ø–µ–≤:', '–ü–µ—Ä–µ—Ö–æ–¥:', '–†–µ–ø:',
        '–ú–æ—Å—Ç:', '–ú–æ—Å—Ç–∏–∫:', '–í—Å—Ç–∞–≤–∫–∞:', '–†–µ—á–∏—Ç–∞—Ç–∏–≤:', '–ë—Ä–∏–¥–∂:', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª:',
        '–ü—Ä–æ–∏–≥—Ä—ã—à:', '–ó–∞–ø–µ–≤:', '–ö–æ–Ω—Ü–æ–≤–∫–∞:', '–û–∫–æ–Ω—á–∞–Ω–∏–µ:', '–í –∫–æ–Ω—Ü–µ:', '–ö–æ–¥–∞:', '–¢—ç–≥:',
        'Intro:', 'Verse:', 'Chorus:', 'Pre chorus:', 'Pre-chorus:', 'Bridge:',
        'Instrumental:', 'Ending:', 'Outro:', 'Interlude:', 'Rap:', 'Spontaneous:',
        'Refrain:', 'Tag:', 'Coda:', 'Vamp:', 'Channel:', 'Breakdown:', 'Hook:',
        '–í—Å—Ç—É–ø:', '–ü—Ä–∏—Å–ø—ñ–≤:', '–ë—Ä—ñ–¥–∂:', '–ó–∞—Å–ø—ñ–≤:', '–ú—ñ—Å—Ç:', '–ü—Ä–æ–≥—Ä–∞—à:',
        '–ü–µ—Ä–µ—Ö—ñ–¥:', '–Ü–Ω—Ç—Ä–æ:', '–ü–æ–≤—Ç–æ—Ä:', '–ö—ñ–Ω–µ—Ü—å:', '–¢–µ–≥:'
    ])
}

def trim(s): return s.strip() if isinstance(s, str) else ''

def is_non_empty(s): return isinstance(s, str) and s.strip()

def clean_html_entities(s): return re.sub(r'&[\w#]+;', '', s) if is_non_empty(s) else ''

def is_chord_line(line):
    if not is_non_empty(line): return False
    tokens = trim(line).split()
    return all(CHORD_REGEX.match(t) or any(sym in t for sym in CHORD_SYMBOLS) for t in tokens)

def is_section_label(line):
    line = trim(line).lower()
    return any(line.startswith(label.rstrip(':|')) for label in SECTION_LABELS)

def is_numbered_section(line):
    match = re.match(r'^(\d+)\s*(–∫—É–ø–ª–µ—Ç|–±—Ä–∏–¥–∂|verse|bridge)', line.strip(), re.I)
    return {'number': match[1], 'type': match[2].capitalize()} if match else None

def format_lines(text):
    if not is_non_empty(text): return ''
    lines = text.split('\n')
    result, found_header = [], False

    for line in lines:
        line = trim(line)
        if line.startswith('##('):
            if found_header and result and result[-1] != '':
                result.append('')
            found_header = True
        if line != '//':
            result.append(line)
    return trim('\n'.join(result))

def format_song(raw_text):
    if not is_non_empty(raw_text): return ''
    text = clean_html_entities(raw_text)
    output = []

    for line in text.split('\n'):
        line = trim(line)
        if not line or is_chord_line(line):
            continue
        if section := is_numbered_section(line):
            output.append(f"{section['type']} {section['number']}:")
        elif is_section_label(line):
            output.append(re.sub(r'[:|]$', '', line) + ':')
        else:
            output.append(line)

    return format_lines('\n'.join(output))


API_TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(API_TOKEN)


bot.user_data = {}

COMMON_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "X-Requested-With": "XMLHttpRequest",
    "Referer": "https://fonki.pro/"
}


def send_audio_file(chat_id, url, song_name):
    try:
        downloading_message = bot.send_message(chat_id, f"‚è≥ –°–∫–∞—á–∏–≤–∞—é  ...")

        file_content = download_mp3(url)

        if file_content:
            bot.send_audio(chat_id, file_content, title=song_name, timeout=120)
        else:
            bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å ...")

        bot.delete_message(chat_id, downloading_message.message_id)
    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        print(f"Send minus file error: {e}")




def download_mp3(url):
    print(url)
    try:
        response = requests.get(url, headers=COMMON_HEADERS, timeout=15)
        if response.status_code == 200:
            return response.content
        else:
            print(f"Download error: {response.status_code}")
            return None
    except Exception as e:
        print(f"Exception during MP3 download: {e}")
        return None

@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(
        message.chat.id,
        "üé§ –ù–∞–ø–∏—à–∏ *–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ üéº *—Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏*\n"
        "‚Ä¢ –°–∫–∞—á–∞—Ç—å üéµ *–ø–ª—é—Å* –∏ üé∂ *–º–∏–Ω—É—Å* –≤–µ—Ä—Å–∏–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å üìÑ *PDF –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏*\n\n"
        "üí¨ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ –Ω–∞—á–Ω—ë–º!",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: True)
def handle_song_request(message):
    user_input = message.text.strip()
    search_url = f"https://fonki.pro/search?name={user_input}"

    try:
        response = requests.get(search_url, headers=COMMON_HEADERS, timeout=15)
        response.raise_for_status()

        data = response.json()
        songs = data.get('musics', {}).get('data', [])

        if not songs:
            bot.send_message(message.chat.id, "‚ùå –ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return

        bot.user_data[message.chat.id] = {"results": songs}

        if len(songs) == 1:
            # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            song = songs[0]
            bot.user_data[message.chat.id] = {
                "results": songs,
                "selected": song
            }

            song_name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            lyrics = format_song(song.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞.'))

            if len(lyrics) > 4000:
                lyrics = lyrics[:4000] + "\n...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"

            bot.send_message(message.chat.id, f"üé§ *{song_name}*\n\n{lyrics}", parse_mode="Markdown")

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="download_pdf")
            )
            markup.add(
                types.InlineKeyboardButton("üéµ –°–∫–∞—á–∞—Ç—å MP3+", callback_data="download_mp3+"),
                types.InlineKeyboardButton("üé∂ –°–∫–∞—á–∞—Ç—å MP3-", callback_data="download_mp3-")
            )
            bot.send_message(message.chat.id, "üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=markup)

        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
            bot.user_data[message.chat.id] = {"results": songs}
            markup = types.InlineKeyboardMarkup()
            for i, song in enumerate(songs[:5]):
                name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                artist = song.get('artist').get('name')
                markup.add(types.InlineKeyboardButton(f'{name} - {artist}', callback_data=f"choose::{i}"))

            bot.send_message(message.chat.id, "üîç –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞:", reply_markup=markup)


    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
        print(f"Error during search: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("choose::"))
def handle_song_choice(call):
    try:
        chat_id = call.message.chat.id
        index = int(call.data.split("::")[1])

        song = bot.user_data.get(chat_id, {}).get("results", [])[index]
        if not song:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é.")
            return

        bot.user_data[chat_id]["selected"] = song
        song_name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        lyrics = format_song(song.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞.'))

        if len(lyrics) > 4000:
            lyrics = lyrics[:4000] + "\n...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"

        bot.send_message(chat_id, f"üé§ *{song_name}*\n\n{lyrics}", parse_mode="Markdown")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="download_pdf"))
        markup.add(
            types.InlineKeyboardButton("üéµ –°–∫–∞—á–∞—Ç—å MP3+", callback_data="download_mp3+"),
            types.InlineKeyboardButton("üé∂ –°–∫–∞—á–∞—Ç—å MP3-", callback_data="download_mp3-")
        )
        bot.send_message(chat_id, "üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=markup)

    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Å–Ω–∏.")
        print(f"Song choice error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "download_pdf")
def callback_download_pdf(call):
    chat_id = call.message.chat.id
    song = bot.user_data.get(chat_id, {}).get("selected")

    if not song:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏.")
        return

    try:
        song_name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        lyrics = format_song(song.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞.'))

        filename = create_pdf(lyrics, f"{song_name}.pdf")
        with open(filename, "rb") as f:
            bot.send_document(chat_id, f, visible_file_name=f"{song_name}.pdf")
        os.remove(filename)

    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF.")
        print(f"PDF error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "download_mp3+")
def callback_download_mp3(call):
    chat_id = call.message.chat.id
    song = bot.user_data.get(chat_id, {}).get("selected")

    if not song:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–ª—é—Å –ø–µ—Å–Ω–∏.")
        return

    try:
        song_name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        song_plus = str(song.get('file'))

        send_audio_file(chat_id, "https://fonki.pro" + song_plus, song_name)

    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ MP3+.")
        print(f"MP3+ error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "download_mp3-")
def callback_download_mp3_minus(call):
    chat_id = call.message.chat.id
    song = bot.user_data.get(chat_id, {}).get("selected")

    if not song:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–∏–Ω—É—Å –ø–µ—Å–Ω–∏.")
        return

    try:
        song_name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        song_id = str(song.get('id'))

        response = requests.get(f"https://fonki.pro/minus/{song_id}", headers=COMMON_HEADERS, timeout=15)
        response.raise_for_status()

        matches = re.findall(r'data-source="/plugin/sounds/uploads/(\d+)\.mp3"', response.text)

        if not matches:
            bot.send_message(chat_id, "‚ö†Ô∏è –ú–∏–Ω—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if len(matches) == 1:
            # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∏–Ω—É—Å ‚Äî —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ–º
            send_audio_file(chat_id, f"https://fonki.pro/plugin/sounds/uploads/{matches[0]}.mp3", song_name)
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –¥–∞—ë–º –≤—ã–±—Ä–∞—Ç—å
            markup = types.InlineKeyboardMarkup()
            for i, match_id in enumerate(matches):
                btn = types.InlineKeyboardButton(f"–í–µ—Ä—Å–∏—è {i+1} (ID: {match_id})", callback_data=f"download_specific_minus::{match_id}")
                markup.add(btn)
            msg = bot.send_message(chat_id, "üé∂ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π –º–∏–Ω—É—Å–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é:", reply_markup=markup)
            bot.user_data[chat_id]["version_pick"] = msg


    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏–Ω—É—Å–∞.")
        print(f"MP3- search error: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("download_specific_minus::"))
def callback_download_specific_minus(call):
    chat_id = call.message.chat.id
    song = bot.user_data.get(chat_id, {}).get("selected")

    if not song:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        song_id = call.data.split("::")[1]
        song_name = song.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        send_audio_file(chat_id, f"https://fonki.pro/plugin/sounds/uploads/{song_id}.mp3", song_name)
        msg = bot.user_data.get(chat_id, {}).get("version_pick")
        if msg:
            bot.delete_message(chat_id, msg.message_id)


    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.")
        print(f"Specific minus error: {e}")



print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
